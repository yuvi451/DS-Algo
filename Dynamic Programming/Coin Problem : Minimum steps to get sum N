vector <int> coins = {1, 3, 4};
    int n = 3;
    vector <int> value(n + 1, 0);        
    for (int i=1; i<=n; i++){           // 'i' indicates the sum we want to achieve
        value[i] = INT16_MAX;           //Initialises the first elemen
        for (auto it: coins){
            if (i - it >= 0){           //checks whether coin with value 'it' can be chosen
                value[i] = min(value[i], 1 + value[i - it]);        //this system works in such a way that all values preceding 'i' have been calculated at first.
            }
        }
    }
    cout<<value[n];

**Value vector stores minimum number of steps to get sum N. Initialising value vector to zero is important.
  The key thing to understand here is memoization. We basically store solution to each smaller problem / intermediate step in 'value' vector and use it directly while 
  calculating newer results. This reusability saves us a lot of time. This memoization is done very systematically. We start from the first element
  and move our way up to the last.**

--Recursive Approach--

--Minimum number of steps == Minimum number of times function needs to be called--

int solve(int n, vector <int> coins, vector <int> ans){
    if (ans[n]) return ans[n];        
    if (n == 0) return 0;
    if (n < 0) return INT16_MAX;    
    int best = INT16_MAX;
    for (auto it: coins){
        best = min(best , 1 + solve(n - it, coins, ans));
    }
    ans[n] = best;
    return best;
}

Calling this functon:
    vector <int> coins = {1, 3, 4};  //different coins available for use
    int n = 10;                      //desired sum
    vector <int> ans(n, 0);          //ans vector to store intermediate solutions ==> saves time ; 
    cout<<solve(n, coins, ans);

