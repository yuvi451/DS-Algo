    vector <int> coins = {1,3,4};
    int n = 10;
    vector <int> first(n + 1, 0);
    vector <int> value(n+1, 0);
    for (int i=1; i<=n; i++){
        value[i] = INT16_MAX;
        for (auto it: coins){
            if (i-it >= 0 and value[i-it] + 1 < value[i]){     //if for any 'it' you get 1+value[i-it] i.e. number of coins required less than you chose currently
                value[i] = value[i-it] + 1;                    // then you update your solution. In that case 'it' would be the first coin in optimal solution.
                first[i] = it;
            }
        }
    }
    while (n > 0){
        cout<<first[n]<<" ";
        n -= first[n];
    }

**vector 'first' indicates for each sum of money the first coin in an optimal solution. Value store the minimum number of steps to get sum N**

--Recursive Approach--

int solve(int n, vector <int> coins, vector <int> temp, vector <vector<int>>& ans){
    if (n == 0) {
        sort(temp.begin(), temp.end());
        if (find(ans.begin(), ans.end(), temp) == ans.end() or ans.size() == 0) ans.push_back(temp);
        return 0;
    } 
    if (n < 0) return 0;
    for (auto it: coins){
        temp.push_back(it);
        solve(n - it, coins, temp, ans);
        temp.pop_back();
    }
    return 0;
}

Calling this function:

    vector <int> coins = {1, 2, 3, 4};
    vector <int> temp;
    vector <vector<int>> ans;
    solve(n, coins, temp, ans);
    int min_size = INT_MAX;
    for (auto it: ans){
        int size = it.size();
        min_size = min(min_size, size);
    }
    for (auto it: ans){
        int size = it.size();
        if (size == min_size){
            for (auto it1: it){
                cout<<it1<<" ";
            } cout<<endl;
        }
    }

**The function solve modifies the vector ans in place and stores all possible ways in which sum N can be achieved.
  Here i used find function of c++ that checks whether vector temp already exists in vector ans or not.**
