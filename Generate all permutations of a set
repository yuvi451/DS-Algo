void f(vector <int> input_vector, vector <int> permutation, vector <bool> chosen){
    if (permutation.size() == input_vector.size()){
        for (auto it:permutation){
            cout<<it<<" ";
        } cout<<endl;
    } else {
        for (int i=0; i<input_vector.size(); i++){
            if (chosen[i]) continue;
            chosen[i] = true;
            permutation.push_back(input_vector[i]);
            f(input_vector, permutation, chosen);
            chosen[i] = false;
            permutation.pop_back();
        }
    }
}

Prints all permutations of a set

** Pass in an emtpy vector "permutation" to temporarily store one of the many permutations,
   Also pass in a bool vector "chosen" initialised to value false : vector <bool> chosen(input_vector.size(), false);  
   ==> (the length of vector "chosen" is input_vector.size()) **

When permutation.size() == input_vector.size(), one of the many permutations has been formed. At this point you can either print it or return it or pass it
to a bigger set
   
