void f(vector <int> input_set, vector <int> subset, int i = 0){    
    if (i == input_set.size()){
        for (auto it:subset){
            cout<<it<<" ";
        } cout<<endl;
    } else {
        subset.push_back(input_set[i]);
        f(input_set, subset, i+1);
        subset.pop_back();
        f(input_set, subset, i+1);
    }
}

Prints all subsets of a set 

** Pass in an empty vector "subset"**

When i == input_set.size() ==> one of the many subsets has been formed  ==> you can either print it or simply return it or 
push it into a universal set

The thinking behind this is:
Assume that the function 'f' returns all subsets containing element at index i. Now this can be broken as: store element at index i
in vector subset and then store all possible subsets (formed from remaining elements) in that set. Finally remove that i-th element from 
the set and repeat the same for i+1 th element.
